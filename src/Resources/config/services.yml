services:
    anime_db.listener.update:
        class: AnimeDb\Bundle\AnimeDbBundle\Event\Listener\UpdateItself
        arguments: [ @anime_db.zip, %kernel.root_dir%, %anime_db.monitor% ]
        tags:
            - { name: kernel.event_listener, event: anime_db.update_itself.downloaded, method: onAppDownloadedMergeComposerRequirements }
            - { name: kernel.event_listener, event: anime_db.update_itself.downloaded, method: onAppDownloadedMergeConfigs }
            - { name: kernel.event_listener, event: anime_db.update_itself.downloaded, method: onAppDownloadedMergeBinRun }
            - { name: kernel.event_listener, event: anime_db.update_itself.downloaded, method: onAppDownloadedMergeBinService }
            - { name: kernel.event_listener, event: anime_db.update_itself.downloaded, method: onAppDownloadedChangeAccessToFiles }

    anime_db.event_dispatcher:
        class: AnimeDb\Bundle\AnimeDbBundle\Event\Dispatcher
        calls:
            - [ setDispatcherDriver, [ @event_dispatcher ] ]

    anime_db.manipulator.composer:
        class: AnimeDb\Bundle\AnimeDbBundle\Manipulator\Composer
        arguments: [ %kernel.root_dir%/../composer.json ]

    anime_db.zip:
        class: ZipArchive
        public: false

    anime_db.client:
        class: Guzzle\Http\Client
        public: false

    anime_db.composer.factory:
        class: Composer\Factory
        public: false

    anime_db.composer.loader:
        class: Composer\Package\Loader\ArrayLoader
        public: false

    anime_db.client.github:
        class: AnimeDb\Bundle\AnimeDbBundle\Client\GitHub
        arguments: [ %anime_db.github.api%, @anime_db.client ]

    anime_db.composer:
        class: AnimeDb\Bundle\AnimeDbBundle\Composer\Composer
        arguments:
            - @anime_db.composer.factory
            - @anime_db.composer.loader
            - %kernel.root_dir%/../composer.lock
